{"version":3,"sources":["operator-precedence/core/OperatorSign.ts","operator-precedence/core/index.ts","operator-precedence/ArithmeticUnits.ts","operator-precedence/FlatStep.ts","operator-precedence/CompositeStep.ts","operator-precedence/index.ts","expression-generators/Helpers.ts","expression-generators/AdditionSubtraction.ts","expression-generators/MultiplicationDivision.ts","expression-generators/MDAS.ts","expression-generators/ParentesisOnly.ts","expression-generators/PMDAS.ts","expression-generators/test/AllRandomTest.ts","index.ts"],"names":[],"mappings":"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","file":"src.0bcf48fc.js","sourceRoot":"..\\src","sourcesContent":["export enum OperatorSign\r\n{\r\n    Add = \"+\",\r\n    Subtract = \"-\",\r\n    Multiply = \"*\",\r\n    Divide = \"/\"\r\n}\r\n\r\nexport function replaceSigns(input: string[])\r\n{\r\n    return input.map(x =>\r\n    {\r\n        switch (x)\r\n        {\r\n            case OperatorSign.Multiply:\r\n                return \"×\"\r\n            case OperatorSign.Divide:\r\n                return \"÷\"\r\n            default:\r\n                return x\r\n        }\r\n    })\r\n}\r\n","export * from './types'\r\nexport * from './IOperation'\r\nexport * from './IOperator'\r\nexport * from './IReducible'\r\nexport * from './OperatorSign'","import { OperatorSign, IOperation, IOperator } from \"./core\";\r\n\r\nexport const Digits = \"0123456789I\"\r\n\r\nfunction constructOperator(sign: OperatorSign, evaluater: (x: number, y: number) => number): IOperator\r\n{\r\n    return {\r\n        sign,\r\n        evaluate(left: number, right: number): number\r\n        {\r\n            return evaluater(left, right)\r\n        },\r\n        toString()\r\n        {\r\n            return this.sign.toString()\r\n        }\r\n    }\r\n}\r\n\r\nfunction constructOperation(operator: IOperator): (input: number) => IOperation\r\n{\r\n    return (input: number) => ({\r\n        operator,\r\n        value: input,\r\n        updateValue(input: number)\r\n        {\r\n            return constructOperation(this.operator)(input)\r\n        },\r\n        evaluateWith(left: number): number\r\n        {\r\n            return operator.evaluate(left, this.value)\r\n        },\r\n        pipe(left: IOperation): IOperation\r\n        {\r\n            const result = operator.evaluate(left.value, this.value)\r\n            const operation = constructOperation(left.operator)\r\n            return operation(result)\r\n        },\r\n        toString()\r\n        {\r\n            return `${this.operator.sign} ${this.value}`\r\n        }\r\n    })\r\n}\r\n\r\nconst adder = constructOperator(OperatorSign.Add, (x, y) => x + y);\r\nconst substracter = constructOperator(OperatorSign.Subtract, (x, y) => x - y);\r\nconst multiplier = constructOperator(OperatorSign.Multiply, (x, y) => x * y);\r\nconst divider = constructOperator(OperatorSign.Divide, (x, y) => x / y);\r\n\r\nexport const add = constructOperation(adder);\r\nexport const subtract = constructOperation(substracter);\r\nexport const multiply = constructOperation(multiplier);\r\nexport const divide = constructOperation(divider);\r\n","import { IReducible, IOperation, OperatorSign, SimpleRange } from \"./core\";\r\nimport { Digits, add } from \"./ArithmeticUnits\";\r\n\r\nexport const prioritySigns = [OperatorSign.Multiply, OperatorSign.Divide]\r\n\r\nfunction sameOperatingPrecendence(reference: OperatorSign, input: OperatorSign)\r\n{\r\n    const AS = [OperatorSign.Add, OperatorSign.Subtract]\r\n    const MD = [OperatorSign.Multiply, OperatorSign.Divide]\r\n\r\n    return [reference, input].every(x => AS.some(y => y === x)) || [reference, input].every(x => MD.some(y => y === x))\r\n}\r\n\r\nexport class FlatStep implements IReducible\r\n{\r\n    public readonly operations: IOperation[]\r\n    public readonly canReduce: boolean\r\n\r\n    constructor(public readonly head: number, ...operations: IOperation[])\r\n    {\r\n        this.operations = operations;\r\n\r\n        this.canReduce = operations.length === 0 ? false : true\r\n    }\r\n\r\n    getPriorityPosition()\r\n    {\r\n        if (this.operations.length <= 1)\r\n        {\r\n            return 0\r\n        }\r\n\r\n        let [priority, ..._] = this.operations.filter(x => prioritySigns.some(y => x.operator.sign === y));\r\n\r\n        if (priority)\r\n        {\r\n            for (let index = 0; index < this.operations.length; index++)\r\n            {\r\n                const element = this.operations[index];\r\n                if (priority === element)\r\n                {\r\n                    return index\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    getOperationStringRange(operationIndex: number): SimpleRange\r\n    {\r\n        const string = this.toString()\r\n        let output: SimpleRange = { start: undefined, end: undefined }\r\n        const against = this.operations.slice()\r\n        let comparer = add(this.head)\r\n        let currentOperationIndex = -1\r\n\r\n        for (let index = 0; index < string.length; index++)\r\n        {\r\n            const element = string[index];\r\n            if (Digits.includes(element))\r\n            {\r\n                const target = index\r\n                const targetOperation = comparer\r\n                index += comparer.value.toString().length - 1\r\n                comparer = against.shift()\r\n                currentOperationIndex++\r\n\r\n                if (currentOperationIndex >= operationIndex)\r\n                {\r\n                    if (output.start === undefined)\r\n                    {\r\n                        output.start = target\r\n                        continue\r\n                    }\r\n                    if (output.end === undefined)\r\n                    {\r\n                        output.end = target + targetOperation.value.toString().length - 1\r\n                        return output\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output\r\n    }\r\n\r\n    getFullOperationStringRange(): SimpleRange\r\n    {\r\n        const signs = this.operations.map(x => x.operator.sign)\r\n\r\n        if (signs.every(x => sameOperatingPrecendence(signs[0], x)))\r\n        {\r\n            return { start: 0, end: this.toString().length - 1 }\r\n        }\r\n\r\n        const priorityRange = this.collectRange(this.getPriorityPosition())\r\n\r\n        return priorityRange\r\n    }\r\n\r\n    getPriorityRanges()\r\n    {\r\n        const priorities = this.operations.map((x, i) => \r\n        {\r\n            if (prioritySigns.some(y => x.operator.sign === y))\r\n            {\r\n                return { index: i, operation: x }\r\n            }\r\n            else\r\n            {\r\n                return undefined\r\n            }\r\n        })\r\n            .filter(x => x)\r\n            .map(x => this.collectRange(x.index))\r\n\r\n        return priorities\r\n    }\r\n\r\n    private collectRange(start: number)\r\n    {\r\n        const priorityRange = this.getOperationStringRange(start)\r\n\r\n        const string = this.toString()\r\n        let tempEnd = priorityRange.end\r\n\r\n        for (let index = priorityRange.end + 1; index < string.length; index++)\r\n        {\r\n            const element = string[index];\r\n            // if (element === OperatorSign.Multiply || element === OperatorSign.Divide)\r\n            // {\r\n            //     if (hasAS)\r\n            //     {\r\n            //         return priorityRange\r\n            //     }\r\n            // }\r\n            if (element === OperatorSign.Add || element === OperatorSign.Subtract)\r\n            {\r\n                // if (priorityRange.start !== 0)\r\n                // {\r\n                //     return priorityRange\r\n                // }\r\n                // hasAS = true\r\n                priorityRange.end = tempEnd - 1\r\n                return priorityRange\r\n            }\r\n            tempEnd = index\r\n        }\r\n\r\n        priorityRange.end = tempEnd\r\n\r\n        return priorityRange\r\n    }\r\n\r\n    getAtPosition(operationIndex: number)\r\n    {\r\n        if (operationIndex === 0)\r\n        {\r\n            return add(this.head)\r\n        }\r\n        else\r\n        {\r\n            return this.operations[operationIndex - 1]\r\n        }\r\n    }\r\n\r\n    reduce()\r\n    {\r\n        if (this.operations.length === 1)\r\n        {\r\n            return this.operations[0].evaluateWith(this.head);\r\n        }\r\n\r\n        let [priority, ..._] = this.operations.filter(x => prioritySigns.some(y => x.operator.sign === y));\r\n\r\n        if (priority)\r\n        {\r\n            const indexTarget = this.operations.indexOf(priority);\r\n            const rest = this.operations.slice()\r\n            rest.splice(indexTarget, 1);\r\n            if (indexTarget !== 0)\r\n            {\r\n                const left = this.operations[indexTarget - 1];\r\n                rest[indexTarget - 1] = priority.pipe(left);\r\n                return new FlatStep(this.head, ...rest);\r\n            }\r\n        }\r\n        const [target, ...rest] = this.operations.slice();\r\n        const left = this.head\r\n        const result = target.evaluateWith(left)\r\n        return new FlatStep(result, ...rest)\r\n    }\r\n\r\n    hasSomeConditionInValues(predicate: (x: number) => boolean)\r\n    {\r\n        return predicate(this.head) || this.operations.some(x => predicate(x.value))\r\n    }\r\n\r\n    result()\r\n    {\r\n        return eval(this.toString())\r\n    }\r\n\r\n    toString()\r\n    {\r\n        return `${this.head} ${this.operations.map(x => x.toString()).join(\" \")}`;\r\n    }\r\n}\r\n","import { IReducible, IOperation, DeepArray, SimpleRange } from \"./core/\"\r\nimport { FlatStep } from \"./FlatStep\"\r\nimport { Digits } from \"./ArithmeticUnits\";\r\n\r\nfunction flatten<T>(items: DeepArray<T>): T[]\r\n{\r\n    const flat: T[] = []\r\n    items.forEach(item =>\r\n    {\r\n        if (Array.isArray(item))\r\n        {\r\n            flat.push(...flatten(item))\r\n        }\r\n        else\r\n        {\r\n            flat.push(item)\r\n        }\r\n    })\r\n    return flat\r\n}\r\n\r\nfunction deepString<T>(input: DeepArray<T>): string\r\n{\r\n    let output = \"\"\r\n    for (const iterator of input)\r\n    {\r\n        if (Array.isArray(iterator))\r\n        {\r\n            output += \"[\" + deepString(iterator) + \"], \"\r\n        }\r\n        else\r\n        {\r\n            output += iterator + \", \"\r\n        }\r\n    }\r\n    return output\r\n}\r\n\r\nfunction deepLength<T>(input: DeepArray<T>): number\r\n{\r\n    let length = 0\r\n    for (const iterator of input)\r\n    {\r\n        if (Array.isArray(iterator))\r\n        {\r\n            length += deepLength(iterator)\r\n        }\r\n        else\r\n        {\r\n            length += 1\r\n        }\r\n    }\r\n    return length\r\n}\r\n\r\n/**\r\n * TODO: This implementation depends on too many recursive patterns, flatten them to iterative patterns.\r\n */\r\nexport class CompositeStep implements IReducible\r\n{\r\n    public readonly canReduce: boolean\r\n    public readonly operations: DeepArray<IOperation>\r\n\r\n    public readonly operationsFlat: IOperation[]\r\n\r\n    constructor(operations: DeepArray<IOperation>)\r\n    {\r\n        this.operations = operations\r\n\r\n        this.operationsFlat = flatten(this.operations)\r\n\r\n        this.canReduce = operations.length <= 1 ? false : true\r\n    }\r\n\r\n    public static getDepth(input: IOperation | DeepArray<IOperation>)\r\n    {\r\n        const traverseRecursive = (target: IOperation | DeepArray<IOperation>): number =>\r\n        {\r\n            let depth = 0\r\n            if (Array.isArray(target))\r\n            {\r\n                let candidate = 0\r\n                for (const iterator of target)\r\n                {\r\n                    let result = depth + traverseRecursive(iterator) + 1\r\n                    if (result > candidate)\r\n                    {\r\n                        candidate = result\r\n                    }\r\n                    candidate\r\n                }\r\n                depth = candidate\r\n            }\r\n            return depth\r\n        }\r\n        return traverseRecursive(input) - 1\r\n    }\r\n\r\n    public getAtPosition(operationIndex: number): IOperation\r\n    {\r\n        return this.operationsFlat[operationIndex]\r\n    }\r\n\r\n    private getDepth()\r\n    {\r\n        return CompositeStep.getDepth(this.operations)\r\n    }\r\n\r\n    hasSomeConditionInValues(predicate: (x: number) => boolean)\r\n    {\r\n        return this.operationsFlat.some(x => predicate(x.value))\r\n    }\r\n\r\n    getPriorityPosition(): number\r\n    {\r\n        const firstDepth = CompositeStep.getDepth(this.operations[0])\r\n\r\n        if (this.getDepth() <= 1 && this.operations.every(x => CompositeStep.getDepth(x) === firstDepth))\r\n        {\r\n            if (this.getDepth() === 0)\r\n            {\r\n                const [head, ...rest] = this.operations as IOperation[]\r\n                return new FlatStep(head.value, ...rest).getPriorityPosition()\r\n            }\r\n            else\r\n            {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        const operations = this.operations.slice() as DeepArray<IOperation>\r\n\r\n        const deepFindRecursive = (targets: DeepArray<IOperation>): number =>\r\n        {\r\n            const maxDepth = targets.reduce((x, y) =>\r\n            {\r\n                const depth = CompositeStep.getDepth(y)\r\n                return depth > x ? depth : x\r\n            }, 0)\r\n\r\n            let skip = 0\r\n            for (const iterator of targets)\r\n            {\r\n                const depth = CompositeStep.getDepth(iterator)\r\n                if (depth < maxDepth)\r\n                {\r\n                    if (depth > -1)\r\n                    {\r\n                        skip += deepLength(iterator as DeepArray<IOperation>)\r\n                    }\r\n                    else\r\n                    {\r\n                        skip += 1\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (CompositeStep.getDepth(iterator) === 0)\r\n                    {\r\n                        const [head, ...rest] = iterator as IOperation[]\r\n                        return skip + new FlatStep(head.value, ...rest).getPriorityPosition()\r\n                    }\r\n                    else\r\n                    {\r\n                        return skip + deepFindRecursive(iterator as DeepArray<IOperation>)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return deepFindRecursive(operations)\r\n    }\r\n\r\n    getOperationStringRange(operationIndex: number): SimpleRange\r\n    {\r\n        const string = this.toString()\r\n        const output: SimpleRange = { start: undefined, end: undefined }\r\n        const against = this.operationsFlat.slice()\r\n        let comparer = against.shift()\r\n        let currentOperationIndex = -1\r\n\r\n        for (let index = 0; index < string.length; index++)\r\n        {\r\n            const element = string[index];\r\n            if (Digits.includes(element))\r\n            {\r\n                const target = index\r\n                const targetOperation = comparer\r\n                index += comparer.value.toString().length - 1\r\n                comparer = against.shift()\r\n                currentOperationIndex++\r\n\r\n                if (currentOperationIndex >= operationIndex)\r\n                {\r\n                    if (output.start === undefined)\r\n                    {\r\n                        output.start = target\r\n                        continue\r\n                    }\r\n                    if (output.end === undefined)\r\n                    {\r\n                        output.end = target + targetOperation.value.toString().length - 1\r\n                        return output\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output\r\n    }\r\n\r\n    getFullOperationStringRange()\r\n    {\r\n        const range = this.getOperationStringRange(this.getPriorityPosition())\r\n\r\n        for (const iterator of this.operations)\r\n        {\r\n            if (Array.isArray(iterator) && iterator.every(x => !Array.isArray(x)))\r\n            {\r\n                const [head, ...rest] = iterator as IOperation[]\r\n                const flatten = new FlatStep(head.value, ...rest)\r\n                const flatOperationRange = flatten.getFullOperationStringRange()\r\n                range.end = range.start + (flatOperationRange.end - flatOperationRange.start)\r\n                return range\r\n            }\r\n        }\r\n\r\n        return range\r\n    }\r\n\r\n    /**\r\n     * Single bracket depth only.\r\n     */\r\n    getBracketRanges()\r\n    {\r\n        if (this.getDepth() > 1)\r\n        {\r\n            throw \"getBracketRanges() does not support depth > 1 as of yet.\"\r\n        }\r\n        const string = this.toString()\r\n        const indexes = string.split(\"\").reduce((x, y, i) => y === \"(\" || y === \")\" ? x.push(i) && x : x, [] as number[])\r\n        let ranges: SimpleRange[] = []\r\n        while (indexes.length)\r\n        {\r\n            ranges.push({ start: indexes.shift(), end: indexes.shift() })\r\n        }\r\n        return ranges\r\n    }\r\n\r\n    canFlatten()\r\n    {\r\n        return this.operations.every(x => !Array.isArray(x))\r\n    }\r\n\r\n    tryFlatten()\r\n    {\r\n        if (this.canFlatten())\r\n        {\r\n            const [head, ...rest] = this.operations as IOperation[]\r\n            return new FlatStep(head.value, ...rest)\r\n        }\r\n        else\r\n        {\r\n            return this\r\n        }\r\n    }\r\n\r\n    reduce(): IReducible\r\n    {\r\n        if (this.canFlatten())\r\n        {\r\n            return this.tryFlatten().reduce() as IReducible\r\n        }\r\n\r\n        const subReduceRecursive = (operations: DeepArray<IOperation>) =>\r\n        {\r\n            let depth = -1\r\n            let priority: DeepArray<IOperation>\r\n            let priorityIndex = -1\r\n\r\n            for (let index = 0; index < operations.length; index++)\r\n            {\r\n                const element = operations[index]\r\n                let candidate = CompositeStep.getDepth(element)\r\n                if (candidate > depth)\r\n                {\r\n                    depth = candidate\r\n                    priority = element as DeepArray<IOperation>\r\n                    priorityIndex = index\r\n                }\r\n            }\r\n\r\n            if (CompositeStep.getDepth(operations) <= 1)\r\n            {\r\n                for (let index = 0; index < operations.length; index++)\r\n                {\r\n                    if (Array.isArray(operations[index]))\r\n                    {\r\n                        const [head, ...rest] = operations[index] as IOperation[]\r\n                        const flat = new FlatStep(head.value, ...rest).reduce()\r\n                        if (typeof (flat) === \"number\")\r\n                        {\r\n                            operations[index] = head.updateValue(flat)\r\n                            return new CompositeStep(operations).tryFlatten()\r\n                        }\r\n                        else\r\n                        {\r\n                            operations[index] = [head.updateValue(flat.head), ...flat.operations]\r\n                            return new CompositeStep(operations).tryFlatten()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                const reduced = subReduceRecursive(priority)\r\n                operations[priorityIndex] = reduced.operations as IOperation[]\r\n                return new CompositeStep(operations).tryFlatten()\r\n            }\r\n        }\r\n\r\n        return subReduceRecursive(this.operations.slice())\r\n    }\r\n\r\n    result()\r\n    {\r\n        return eval(this.toString())\r\n    }\r\n\r\n    toString()\r\n    {\r\n        const getInnerMostFirst = (steps: DeepArray<IOperation>): IOperation =>\r\n        {\r\n            const target = steps[0]\r\n            if (Array.isArray(target))\r\n            {\r\n                return getInnerMostFirst(target)\r\n            }\r\n            else\r\n            {\r\n                return target\r\n            }\r\n        }\r\n\r\n        const getBracketedStepStringRecursive = (steps: DeepArray<IOperation>, braceSign?: boolean): string =>\r\n        {\r\n            if (Array.isArray(steps))\r\n            {\r\n                return (braceSign ? getInnerMostFirst(steps).operator.sign + \" \" : \"\") + \"(\" + steps.map((x, i) =>\r\n                {\r\n                    if (i === 0 && !Array.isArray(x))\r\n                    {\r\n                        return `${x.value}`\r\n                    }\r\n                    else if (i === 0 && Array.isArray(x))\r\n                    {\r\n                        return `${getBracketedStepStringRecursive(x)}`\r\n                    }\r\n                    else if (Array.isArray(x))\r\n                    {\r\n                        return getBracketedStepStringRecursive(x, true)\r\n                    }\r\n                    else\r\n                    {\r\n                        return x.toString()\r\n                    }\r\n                }).join(\" \") + \")\"\r\n            }\r\n            else\r\n            {\r\n                return (steps as IOperation).toString()\r\n            }\r\n        }\r\n        return this.operations.map(x => getBracketedStepStringRecursive(x as DeepArray<IOperation>, true)).join(\" \").substring(2)\r\n    }\r\n}\r\n","export * from './ArithmeticUnits'\r\nexport * from './FlatStep'\r\nexport * from './CompositeStep'\r\n\r\n","/**\r\n * Generate a random integer.\r\n * @param min lower bound inclusive.\r\n * @param max uppper bound exclusive.\r\n */\r\nexport function getRandomInt(min: number, max: number)\r\n{\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nexport function getRandomInt2_99()\r\n{\r\n    return getRandomInt(2, 100)\r\n}\r\n\r\nexport function getRandomInt2_10()\r\n{\r\n    return getRandomInt(2, 11)\r\n}\r\n\r\nexport function getRandomInt2_100()\r\n{\r\n    return getRandomInt(2, 101)\r\n}\r\n\r\nexport function getRandomMultiple(base: number, limit: number)\r\n{\r\n    if (base === 0)\r\n    {\r\n        base = 1\r\n        console.warn(\"Base Multiple is 0\")\r\n    }\r\n    const generator = () => generateMultiples(base, limit)\r\n    return pickRandomIterative(generator, 0, limit)\r\n}\r\n\r\nexport function* generateMultiples(base: number, limit: number)\r\n{\r\n    let next = base;\r\n    let counter = 1;\r\n    do\r\n    {\r\n        yield next;\r\n        counter++;\r\n        next = base * counter;\r\n    }\r\n    while (next <= limit)\r\n}\r\n\r\n/**\r\n * Low effort algorithm to randomly pick a possible factor\r\n * @param target number to factorise\r\n */\r\nexport function getRandomFactor(target: number)\r\n{\r\n    // const end = target % 2 === 0 ? target / 2 : target\r\n    const values = Array.from(generatorFactors(target, target))\r\n    return pickRandomInArray(values)\r\n}\r\n\r\nexport function* generatorFactors(target: number, end: number)\r\n{\r\n    let current = 2\r\n    do\r\n    {\r\n        if ((target / current) % 1 === 0)\r\n        {\r\n            yield current\r\n        }\r\n        current++\r\n    }\r\n    while (current <= end)\r\n}\r\n\r\nexport function pickRandomInArray<T>(array: T[])\r\n{\r\n    return array[getRandomInt(0, array.length)]\r\n}\r\n\r\nexport function pickRandomIterative(generator: () => IterableIterator<number>, limitLow: number, limitHigh: number)\r\n{\r\n    const random = getRandomInt(limitLow, limitHigh)\r\n\r\n    let output: number\r\n    const values = generator()\r\n\r\n    for (let item of values)\r\n    {\r\n        output = item\r\n        if (random <= item)\r\n        {\r\n            return output\r\n        }\r\n    }\r\n    if (output)\r\n    {\r\n        return output\r\n    }\r\n    console.warn(\"pickRandomIterative failed\", Array.from(generator()), \"low\", limitLow, \"high\", limitHigh, \"random\", random, \"output\", output)\r\n    return 1\r\n}\r\n\r\nexport function randomBool()\r\n{\r\n    return Math.random() >= 0.5\r\n}","import { add, subtract, FlatStep } from '../operator-precedence'\r\nimport { ExpressionGenerator } from './core/';\r\nimport { getRandomInt2_99, getRandomInt, randomBool, pickRandomInArray } from './Helpers';\r\nimport { IReducible } from '../operator-precedence/core';\r\n\r\n/*\r\n    Specification:\r\n    x, y, z, p, q, r, s [2 to 99]\r\n\r\n    x – y + z, x > y\r\n    x + y – z, x + y > z\r\n    p + q + r – s, p + q + r > s\r\n    p + q – r + s, p + q > r\r\n    p – q + r + s, p > q\r\n    p + q – r – s, p + q > r + s\r\n    p – q – r + s, p > q + r\r\n    p – q + r – s, p > q, r > s\r\n*/\r\n\r\nconst generators: ExpressionGenerator[] = [\r\n    () =>\r\n    {\r\n        const x = getRandomInt(2, 100)\r\n        const y = getRandomInt(2, x)\r\n        const z = getRandomInt2_99()\r\n        return new FlatStep(x, subtract(y), add(z)) // x – y + z, x > y\r\n    },\r\n    () =>\r\n    {\r\n        const z = getRandomInt(3, 100)\r\n        const x = getRandomInt(z, 100)\r\n        const y = getRandomInt(x - z + 1, 100)\r\n        return new FlatStep(x, add(y), subtract(z)) // x + y – z, x + y > z\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt(2, 97)\r\n        const q = getRandomInt(2, 97 - p)\r\n        const r = getRandomInt(2, 97 - p - q)\r\n        const s = getRandomInt(2, p + q + r)\r\n        return new FlatStep(p, add(q), add(r), subtract(s)) // p + q + r – s, p + q + r > s\r\n    },\r\n    () =>\r\n    {\r\n        const r = getRandomInt(3, 100)\r\n        const p = getRandomInt(r / 2 + 1, 100)\r\n        const q = getRandomInt(p, 100)\r\n        const s = getRandomInt(2, 100)\r\n        return new FlatStep(p, add(q), subtract(r), add(s)) // p + q – r + s, p + q > r\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt(2, 100)\r\n        const q = getRandomInt(2, p)\r\n        const r = getRandomInt2_99()\r\n        const s = getRandomInt2_99()\r\n        return new FlatStep(p, subtract(q), add(r), add(s)) // p – q + r + s, p > q\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt2_99()\r\n        const q = getRandomInt2_99()\r\n        const temp = randomBool() ? p : q\r\n        const r = getRandomInt(2, temp - 1)\r\n        const s = getRandomInt(2, (temp === p ? q : p) - 1)\r\n        return new FlatStep(p, add(q), subtract(r), subtract(s)) // p + q – r – s, p + q > r + s\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt(3, 100)\r\n        const q = getRandomInt(2, p - 1)\r\n        const r = getRandomInt(2, p - q)\r\n        const s = getRandomInt2_99()\r\n        return new FlatStep(p, subtract(q), subtract(r), add(s)) // p – q – r + s, p > q + r\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt(2, 100)\r\n        const q = getRandomInt(2, p)\r\n        const r = getRandomInt(2, 100)\r\n        const s = getRandomInt(2, r)\r\n        return new FlatStep(p, subtract(q), add(r), subtract(s)) // p – q + r – s, p > q, r > s\r\n    }\r\n]\r\n\r\nexport function generateRandom(questionNumber: number)\r\n{\r\n    return generators[questionNumber - 1]()\r\n}\r\n\r\nexport function randomAS2Set()\r\n{\r\n    if (randomBool()) // Add\r\n    {\r\n        return new FlatStep(getRandomInt2_99(), add(getRandomInt2_99()))\r\n    }\r\n    else // Subtract\r\n    {\r\n        const a = getRandomInt(2, 99)\r\n        const b = getRandomInt(2, a)\r\n        return new FlatStep(a, subtract(b))\r\n    }\r\n}\r\n\r\nexport function randomAS3Set()\r\n{\r\n    if (randomBool()) // Add\r\n    {\r\n        const precursor = randomAS2Set()\r\n        return new FlatStep(precursor.head, ...precursor.operations, add(getRandomInt2_99()))\r\n    }\r\n    else // Subtract\r\n    {\r\n        let operation: IReducible\r\n        do\r\n        {\r\n            const precursor = randomAS2Set()\r\n            operation = new FlatStep(precursor.head, ...precursor.operations, subtract(getRandomInt(2, 97)))\r\n        }\r\n        while (operation.result() < 0)\r\n        return operation\r\n    }\r\n}\r\n\r\n// let qq = 8\r\n\r\n// while (qq--)\r\n// {\r\n//     let ii = 1000\r\n//     console.log(`Q${qq + 1}-----------------------`)\r\n//     while (ii--)\r\n//     {\r\n//         let ee = generateRandom(qq + 1).toString()\r\n//         if (ii % 100 === 0)\r\n//         {\r\n//             console.log(ee.toString())\r\n//         }\r\n//     }\r\n// }","import { ExpressionGenerator } from \"./core\";\r\nimport { getRandomInt, getRandomInt2_10, getRandomMultiple, getRandomFactor, getRandomInt2_100, randomBool, pickRandomInArray } from \"./Helpers\";\r\nimport { FlatStep, multiply, divide } from \"../operator-precedence\";\r\nimport { IReducible } from \"../operator-precedence/core\";\r\n\r\n/*\r\n    Specification:\r\n    a, b, c [1 to 10]\r\n    p, q, r [1 to 100]\r\n\r\n    a x b ÷ p, p factor of a x b\r\n    p ÷ q x r, q factor of p\r\n    a x b x c ÷ p, p factor of a x b x c\r\n    a x b ÷ p x c, p factor of a x b\r\n    p ÷ a x b x c, a factor of p\r\n    a x b ÷ p ÷ q, p factor of a x b, q factor of a x b ÷ p\r\n    p ÷ q ÷ a x b, q factor of p, a factor of p ÷ q\r\n    p ÷ a x b ÷ q, a factor of p, q factor of p ÷ a x b.\r\n*/\r\n\r\nconst generators: ExpressionGenerator[] = [\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const b = getRandomInt2_10()\r\n        const p = getRandomFactor(a * b)\r\n        return new FlatStep(a, multiply(b), divide(p)) // a x b ÷ p, p factor of a x b\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomMultiple(getRandomInt2_10(), 100)\r\n        const q = getRandomFactor(p)\r\n        const r = getRandomInt2_100()\r\n        return new FlatStep(p, divide(q), multiply(r)) // p ÷ q x r, q factor of p\r\n    },\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const b = getRandomInt2_10()\r\n        const c = getRandomInt(2, Math.floor(100 / (a * b)))\r\n        const p = getRandomFactor(a * b * c)\r\n        return new FlatStep(a, multiply(b), multiply(c), divide(p)) // a x b x c ÷ p, p factor of a x b x c\r\n    },\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const b = getRandomInt2_10()\r\n        const p = getRandomFactor(a * b)\r\n        const c = getRandomInt2_10()\r\n        return new FlatStep(a, multiply(b), divide(p), multiply(c)) // a x b ÷ p x c, p factor of a x b\r\n    },\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const p = getRandomMultiple(a, 100)\r\n        const b = getRandomInt2_10()\r\n        const c = getRandomInt2_10()\r\n        return new FlatStep(p, divide(a), multiply(b), multiply(c)) //p ÷ a x b x c, a factor of p\r\n    },\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const b = getRandomInt2_10()\r\n        const p = getRandomFactor(a * b)\r\n        const q = getRandomFactor(a * b / p)\r\n        return new FlatStep(a, multiply(b), divide(p), divide(q)) // a x b ÷ p ÷ q, p factor of a x b, q factor of a x b ÷ p\r\n    },\r\n    () =>\r\n    {\r\n        const p = getRandomInt2_100()\r\n        const q = getRandomFactor(p)\r\n        const a = getRandomFactor(p / q)\r\n        const b = getRandomInt2_10()\r\n        return new FlatStep(p, divide(q), divide(a), multiply(b)) // p ÷ q ÷ a x b, q factor of p, a factor of p ÷ q\r\n    },\r\n    () =>\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const p = getRandomMultiple(a, 100)\r\n        const temp = 100 / (p / a)\r\n        const b = temp > 10 ? getRandomInt2_10() : getRandomInt(2, temp)\r\n        const q = getRandomFactor(p / a * b)\r\n        return new FlatStep(p, divide(a), multiply(b), divide(q)) // p ÷ a x b ÷ q, a factor of p, q factor of p ÷ a x b\r\n    }\r\n]\r\n\r\nexport function generateRandom(questionNumber: number)\r\n{\r\n    let output: FlatStep\r\n    do\r\n    {\r\n        output = generators[questionNumber - 1]() as FlatStep\r\n        if (output.hasSomeConditionInValues(x => isNaN(x)))\r\n        {\r\n            debugLog(output.toString(), \"Reject due to contain NaN\")\r\n        }\r\n    } while (output.hasSomeConditionInValues(x => isNaN(x)))\r\n    return output\r\n}\r\n\r\nexport function randomMD2Set()\r\n{\r\n    if (randomBool()) // Divide\r\n    {\r\n        const a = getRandomInt2_100()\r\n        const b = getRandomFactor(a)\r\n        return new FlatStep(a, divide(b))\r\n    }\r\n    else // Multiply\r\n    {\r\n        const a = getRandomInt2_10()\r\n        const b = getRandomInt2_10()\r\n        return new FlatStep(a, multiply(b))\r\n    }\r\n}\r\n\r\nexport function randomMD3Set()\r\n{\r\n    if (randomBool()) // Divide \r\n    {\r\n        let precursor = randomMD2Set()\r\n        let a = getRandomFactor(precursor.result())\r\n        return new FlatStep(precursor.head, ...precursor.operations, divide(a))\r\n    }\r\n    else // Multiply \r\n    {\r\n        let precursor = randomMD2Set()\r\n        return new FlatStep(precursor.head, ...precursor.operations, multiply(getRandomInt2_10()))\r\n    }\r\n}\r\n\r\n// let qq = 8\r\n\r\n// while (qq--)\r\n// {\r\n//     let ii = 1000\r\n//     console.log(`Q${qq + 1}-----------------------`)\r\n//     while (ii--)\r\n//     {\r\n//         let ee = generateRandom(qq + 1).toString()\r\n//         if (ii % 100 === 0)\r\n//         {\r\n//             console.log(ee.toString())\r\n//         }\r\n//     }\r\n// }","import { ExpressionGenerator } from \"./core\";\r\nimport { pickRandomInArray, randomBool, getRandomInt2_99, getRandomInt2_10, getRandomFactor, getRandomMultiple } from \"./Helpers\";\r\nimport { FlatStep, add, subtract, multiply, divide, prioritySigns } from \"../operator-precedence\";\r\nimport { randomAS2Set } from \"./AdditionSubtraction\";\r\nimport { randomMD2Set } from \"./MultiplicationDivision\";\r\nimport { IReducible, IOperation, OperatorSign } from \"../operator-precedence/core\";\r\n\r\nexport function inValueBound(x: number)\r\n{\r\n    return x % 1 === 0 && x > 0 && x <= 100\r\n}\r\n\r\nconst generatorsSet2 = [randomAS2Set, randomMD2Set]\r\nconst generatorsASOperations = [add, subtract]\r\nconst generatorsMDOperations = [multiply, divide]\r\n\r\nconst generators: ExpressionGenerator[] = [\r\n    () => // 3 numbers\r\n    {\r\n        let operation: IReducible\r\n        let precursor = pickRandomInArray(generatorsSet2)()\r\n\r\n        let postOperation: (input: number) => IOperation\r\n        let rng: () => number\r\n\r\n        if (randomBool()) // AS\r\n        {\r\n            postOperation = pickRandomInArray(generatorsASOperations)\r\n            rng = getRandomInt2_99\r\n        }\r\n        else // MD\r\n        {\r\n            postOperation = pickRandomInArray(generatorsMDOperations)\r\n            rng = getRandomInt2_10\r\n        }\r\n\r\n        let result: number\r\n        do\r\n        {\r\n            if (postOperation === divide && prioritySigns.every(x => x !== precursor.operations[0].operator.sign)) // Dividing at End\r\n            {\r\n                const divider = getRandomInt2_10()\r\n                precursor.operations[0] = precursor.operations[0].updateValue(getRandomMultiple(divider, 100))\r\n                operation = new FlatStep(precursor.head, ...precursor.operations, postOperation(divider))\r\n                result = operation.result()\r\n            }\r\n            else\r\n            {\r\n                operation = new FlatStep(precursor.head, ...precursor.operations, postOperation(rng()))\r\n                result = operation.result()\r\n            }\r\n            precursor = pickRandomInArray(generatorsSet2)()\r\n        }\r\n        while (result < 0 || result % 1 !== 0);\r\n\r\n        return operation\r\n    },\r\n    () => // 4 numbers\r\n    {\r\n        let precursor = generators[0]() as FlatStep\r\n        if (randomBool())\r\n        {\r\n            if (randomBool()) // Add\r\n            {\r\n                return new FlatStep(precursor.head, ...precursor.operations, add(getRandomInt2_99()))\r\n            }\r\n            else // Multiply\r\n            {\r\n                let output: IReducible\r\n                do\r\n                {\r\n                    precursor = generators[0]() as FlatStep\r\n                    output = new FlatStep(precursor.head, ...precursor.operations, multiply(getRandomInt2_10()))\r\n                }\r\n                while (output.result() < 0);\r\n                return output\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (randomBool()) // Subtract\r\n            {\r\n                let output: IReducible\r\n                do\r\n                {\r\n                    precursor = generators[0]() as FlatStep\r\n                    output = new FlatStep(precursor.head, ...precursor.operations, subtract(getRandomInt2_99()))\r\n                }\r\n                while (output.result() < 0);\r\n                return output\r\n            }\r\n            else // Divide\r\n            {\r\n                let output: IReducible\r\n                let result: number\r\n                do\r\n                {\r\n                    precursor = generators[0]() as FlatStep\r\n                    let divident = precursor.operations[precursor.operations.length - 1].value\r\n                    output = new FlatStep(precursor.head, ...precursor.operations, divide(getRandomFactor(divident)))\r\n                    result = output.result()\r\n                }\r\n                while (result < 0 || result % 1 !== 0);\r\n                return output\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\nexport function generateRandom(questionNumber: number)\r\n{\r\n    const generator = questionNumber <= 3 ? generators[0] : generators[1]\r\n    let output: FlatStep\r\n    let operationSigns: OperatorSign[]\r\n    do\r\n    {\r\n        output = generator() as FlatStep\r\n        operationSigns = output.operations.map(x => x.operator.sign)\r\n    }\r\n    while (operationSigns.every(x => x === OperatorSign.Add || x === OperatorSign.Subtract) || operationSigns.every(x => x === OperatorSign.Multiply || x === OperatorSign.Divide))\r\n    return output\r\n}\r\n\r\n// let qq = 8\r\n\r\n// while (qq--)\r\n// {\r\n//     let ii = 1000\r\n//     console.log(`Q${qq + 1}-----------------------`)\r\n//     while (ii--)\r\n//     {\r\n//         let ee = generateRandom(qq + 1).toString()\r\n//         if (ii % 100 === 0)\r\n//         {\r\n//             console.log(ee.toString())\r\n//         }\r\n//     }\r\n// }\r\n\r\n","import { pickRandomInArray, getRandomInt2_99, getRandomInt2_100, getRandomInt2_10, randomBool } from \"./Helpers\";\r\nimport { add, subtract, multiply, divide, CompositeStep, FlatStep } from \"../operator-precedence\";\r\nimport { IOperation, DeepArray, IReducible } from \"../operator-precedence/core\";\r\nimport { inValueBound } from \"./MDAS\";\r\n\r\nexport const BracketLayouts = [\r\n    [1, 2], // a + (b + c)\r\n    [2, 1], // (a + b) + c,\r\n    [2, 1, 1], // (a + b) + c + d\r\n    [1, 2, 1],\r\n    [1, 1, 2],\r\n    [2, 2],\r\n    [3, 1], // (a + b + c) + d\r\n    [1, 3]\r\n]\r\n\r\n// Must contain parentesis, operations can either only addition with subtraction or multiplication with division\r\n\r\nconst randomAddSubtract = () => pickRandomInArray([add, subtract])\r\nconst randomMultiplyDivide = () => pickRandomInArray([multiply, divide])\r\nconst getRng = (input: () => (input: number) => IOperation) => input === randomAddSubtract ? getRandomInt2_99 : getRandomInt2_10\r\n\r\nfunction checkReject(input: DeepArray<IOperation>)\r\n{\r\n    const steps = new CompositeStep(input.slice())\r\n\r\n    const result = steps.result()\r\n    if (inValueBound(result))\r\n    {\r\n        let reduced = steps as IReducible\r\n        do\r\n        {\r\n            reduced = reduced.reduce() as IReducible\r\n\r\n            if (reduced instanceof CompositeStep)\r\n            {\r\n\r\n                if (reduced.canFlatten())\r\n                {\r\n                    reduced = reduced.tryFlatten() // Jump point to next if\r\n                }\r\n                else\r\n                {\r\n                    if (reduced.hasSomeConditionInValues(x => !inValueBound(x)))\r\n                    {\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (reduced instanceof FlatStep)\r\n            {\r\n                if (reduced.hasSomeConditionInValues(x => !inValueBound(x)))\r\n                {\r\n                    return true\r\n                }\r\n            }\r\n\r\n        }\r\n        while (reduced.canReduce);\r\n\r\n        return false\r\n    }\r\n    else\r\n    {\r\n        return true\r\n    }\r\n}\r\n\r\n/**\r\n * Messy alert.\r\n */\r\nexport function generateRandom(questionNumber: number)\r\n{\r\n    let operations: DeepArray<IOperation>\r\n    const layout = BracketLayouts[questionNumber - 1]\r\n    const generatorOperationSet = pickRandomInArray([randomAddSubtract, randomMultiplyDivide])\r\n\r\n    let generatedSigns: ((input: number) => IOperation)[]\r\n    do\r\n    {\r\n        generatedSigns = Array(layout.reduce((x, y) => x + y, 0) - 1).fill(0).map(() => generatorOperationSet())\r\n    }\r\n    while (generatedSigns.every(x => x(1).operator.sign === (generatedSigns[0](1).operator.sign))) // Very inefficient, but prevent all randomised operations be the same type\r\n\r\n    const signs = [add, ...generatedSigns]\r\n    const rng = getRng(generatorOperationSet)\r\n\r\n    let threshold = 0\r\n\r\n    do\r\n    {\r\n        operations = []\r\n        const signsCopy = signs.slice()\r\n        for (const iterator of layout)\r\n        {\r\n            switch (iterator) // Bracketed operations\r\n            {\r\n                case 1:\r\n                    {\r\n                        operations.push(signsCopy.shift()(rng()))\r\n                        break;\r\n                    }\r\n\r\n                case 2:\r\n                    {\r\n                        const a = signsCopy.shift()(rng())\r\n                        const b = signsCopy.shift()(rng())\r\n                        operations.push([a, b])\r\n                        break;\r\n                    }\r\n\r\n                case 3:\r\n                    {\r\n                        const a = signsCopy.shift()(rng())\r\n                        const b = signsCopy.shift()(rng())\r\n                        const c = signsCopy.shift()(rng())\r\n                        operations.push([a, b, c])\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n        threshold++\r\n\r\n        if (threshold === 100)\r\n        {\r\n            console.warn(\"Rejected\", new CompositeStep(operations).toString())\r\n            return generateRandom(questionNumber)\r\n        }\r\n    }\r\n    while (checkReject(operations.slice()));\r\n\r\n    return new CompositeStep(operations)\r\n}\r\n\r\n\r\n// let qq = 8\r\n\r\n// while (qq--)\r\n// {\r\n//     let ii = 1000\r\n//     console.log(`Q${qq + 1}-----------------------`)\r\n//     while (ii--)\r\n//     {\r\n//         let ee = generateRandom(qq + 1).toString()\r\n//         if (ii % 100 === 0)\r\n//         {\r\n//             console.log(ee.toString())\r\n//         }\r\n//     }\r\n// }","import { FlatStep, add, subtract, divide, multiply, CompositeStep } from \"../operator-precedence\";\r\nimport { pickRandomInArray, getRandomInt2_99, getRandomInt2_10 } from \"./Helpers\";\r\nimport { BracketLayouts } from \"./ParentesisOnly\";\r\nimport { DeepArray, IOperation, OperatorSign, IReducible } from \"../operator-precedence/core\";\r\nimport { inValueBound } from \"./MDAS\";\r\n\r\nfunction getRng(sign: OperatorSign)\r\n{\r\n    switch (sign)\r\n    {\r\n        case OperatorSign.Add:\r\n        case OperatorSign.Subtract:\r\n            return getRandomInt2_99\r\n\r\n        case OperatorSign.Multiply:\r\n        case OperatorSign.Divide:\r\n            return getRandomInt2_10\r\n    }\r\n}\r\n\r\nfunction getSign(operation: (input: number) => IOperation)\r\n{\r\n    switch (operation)\r\n    {\r\n        case add:\r\n            return OperatorSign.Add\r\n        case subtract:\r\n            return OperatorSign.Subtract\r\n        case multiply:\r\n            return OperatorSign.Multiply\r\n        case divide:\r\n            return OperatorSign.Divide\r\n    }\r\n}\r\n\r\nfunction generatorOperationSet()\r\n{\r\n    return pickRandomInArray([add, subtract, multiply, divide])\r\n}\r\n\r\nfunction checkReject(input: DeepArray<IOperation>)\r\n{\r\n    const steps = new CompositeStep(input.slice())\r\n\r\n    const result = steps.result()\r\n    if (inValueBound(result))\r\n    {\r\n        let reduced = steps as IReducible\r\n        do\r\n        {\r\n            reduced = reduced.reduce() as IReducible\r\n\r\n            if (reduced instanceof CompositeStep)\r\n            {\r\n                if (reduced.canFlatten())\r\n                {\r\n                    reduced = reduced.tryFlatten() // Jump point to next if\r\n                }\r\n                else\r\n                {\r\n                    if (reduced.hasSomeConditionInValues(x => !inValueBound(x)))\r\n                    {\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (reduced instanceof FlatStep)\r\n            {\r\n                if (reduced.hasSomeConditionInValues(x => !inValueBound(x)))\r\n                {\r\n                    return true\r\n                }\r\n            }\r\n\r\n        }\r\n        while (reduced.canReduce);\r\n\r\n        return false\r\n    }\r\n    else\r\n    {\r\n        return true\r\n    }\r\n}\r\n\r\nfunction generateOperation(operation: (input: number) => IOperation)\r\n{\r\n    return operation(getRng(getSign(operation))())\r\n}\r\n\r\nconst ASSet = [OperatorSign.Add, OperatorSign.Subtract]\r\nconst MDSet = [OperatorSign.Multiply, OperatorSign.Divide]\r\n\r\nfunction rejectSigns(operations: ((input: number) => IOperation)[])\r\n{\r\n    if (operations.every(x => getSign(x) === getSign(operations[0])))\r\n    {\r\n        return true\r\n    }\r\n\r\n    // Needs to invert this for flow consistency\r\n    if (operations.some(x => ASSet.includes(getSign(x))) && operations.some(x => MDSet.includes(getSign(x))))\r\n    {\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport function generateRandom(questionNumber: number)\r\n{\r\n    let operations: DeepArray<IOperation>\r\n    const layout = BracketLayouts[questionNumber - 1]\r\n\r\n    let generatedSigns: ((input: number) => IOperation)[]\r\n    do\r\n    {\r\n        generatedSigns = Array(layout.reduce((x, y) => x + y, 0) - 1).fill(0).map(() => generatorOperationSet())\r\n    }\r\n    while (rejectSigns(generatedSigns)) // Very inefficient, prevent all randomised operations be the same\r\n\r\n    const signs = [add, ...generatedSigns]\r\n\r\n    do\r\n    {\r\n        operations = []\r\n        const signsCopy = signs.slice()\r\n        for (const iterator of layout)\r\n        {\r\n            switch (iterator) // Bracketed operations\r\n            {\r\n                case 1:\r\n                    {\r\n                        operations.push(generateOperation(signsCopy.shift()))\r\n                        break;\r\n                    }\r\n\r\n                case 2:\r\n                    {\r\n                        const a = generateOperation(signsCopy.shift())\r\n                        const b = generateOperation(signsCopy.shift())\r\n                        operations.push([a, b])\r\n                        break;\r\n                    }\r\n\r\n                case 3:\r\n                    {\r\n                        const a = generateOperation(signsCopy.shift())\r\n                        const b = generateOperation(signsCopy.shift())\r\n                        const c = generateOperation(signsCopy.shift())\r\n                        operations.push([a, b, c])\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n\r\n        //console.log(\"Iterate\", new CompositeStep(operations.slice()), \"=\", new CompositeStep(operations.slice()).result())\r\n\r\n    } while (checkReject(operations.slice()));\r\n\r\n    return new CompositeStep(operations)\r\n}\r\n\r\n// let qq = 8\r\n\r\n// while (qq--)\r\n// {\r\n//     let ii = 1000\r\n//     console.log(`Q${qq + 1}-----------------------`)\r\n//     while (ii--)\r\n//     {\r\n//         let ee = generateRandom(qq + 1).toString()\r\n//         if (ii % 100 === 0)\r\n//         {\r\n//             console.log(ee.toString())\r\n//         }\r\n//     }\r\n// }","import { IReducible } from \"../../operator-precedence/core\";\r\n\r\nfunction getRandomInt(min, max)\r\n{\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction allRandomGenerator(questionNumber: number)\r\n{\r\n    const generators: ((questionNumber?: number) => IReducible)[] = [\r\n        require('../AdditionSubtraction').generateRandom,\r\n        require('../MultiplicationDivision').generateRandom,\r\n        require('../MDAS').generateRandom,\r\n        require('../PMDAS').generateRandom\r\n    ]\r\n\r\n    return generators[getRandomInt(0, generators.length)](questionNumber)\r\n}\r\n\r\nwindow[\"debugLog\"] = console.info\r\n\r\nvar urlParams = new URLSearchParams(location.search);\r\n\r\nlet i = Number(urlParams.get(\"count\"))\r\n\r\nif (isNaN(i) || i <= 0)\r\n{\r\n    i = 100\r\n    urlParams.set(\"count\", \"100\")\r\n    history.replaceState(null, null, \"?\" + decodeURIComponent(urlParams.toString()));\r\n}\r\n\r\nwhile (i--)\r\n{\r\n    const exp = allRandomGenerator(getRandomInt(1, 9))\r\n    console.log(exp, \"=\", exp.result())\r\n}","import './expression-generators/test/AllRandomTest'"]}